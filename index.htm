<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>THESAURUS par Marc-Olivier Lalonde, Amine Benslimane, Charles Morin, Andrew Aboujaoudé</title>
    <style>
        body{
            background-color: rgb(10, 10, 10);
        }
        p {
            font-family: Arial;
            font-size: 16pt;
            text-align: center;
        }
        #ui{
            background-color: black;
            font-family: Arial;
            font-size: 13pt;
            text-align: center;
            padding: 10px 0px;
            border: cornsilk;
        }

        #jeu{
            background-color: black;
            color: rgb(255, 0, 0);
            width: 640px;
            padding: 10px 15px;
            border: 1.5px solid rgb(255, 0, 0);
            border-radius: 10px;
            margin: 0 auto;
        }
    </style>
    
    <script type="text/javascript" src="WebGl.js"></script>
    <script type="text/javascript" src="ShaderCouleursTextures.js"></script>
    <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="Transformations.js"></script>
    <script type="text/javascript" src="sons.js"></script>

    <script type="text/javascript" src="tableauDeJeu.js"></script>

    <script type="text/javascript" src="Camera.js"></script>
    <script type="text/javascript" src="movementCamera.js"></script>
    <script type="text/javascript" src="detectionObjetAutourJoueur.js"></script>
    <script type="text/javascript" src="detruireMur.js"></script>

    <script type="text/javascript" src="Textures.js"></script>
    <script type="text/javascript" src="Plancher.js"></script>
    <script type="text/javascript" src="PlancherEnclos.js"></script>
    <script type="text/javascript" src="Plafond.js"></script>
    <script type="text/javascript" src="Mur.js"></script>
    <script type="text/javascript" src="Coffre.js"></script>
    <script type="text/javascript" src="fleches.js"></script>

    <script type="text/javascript" src="Niveau.js"></script>
    <script type="text/javascript" src="PointeFlechePosJoueur.js"></script>
    <script type="text/javascript" src="VueAerienneDedale.js"></script>
    <script type="text/javascript" src="tele_transporteur.js"></script>
    <script type="text/javascript" src="tele_recepteur.js"></script>

    <script type="text/javascript" src="otherFunctions.js"></script>
    <script type="text/javascript">


        let objCanvas = null;
        let objgl = null;
        let objProgShaders = null;
        let objScene3D = null;
        let objSons = null;

        let positionSourisX = null;
        let binTournerCamera = false;
        let binMovAvant = false;
        let binMovArriere = false;
        let binMovDroit = false;
        let binMovGauche = false;
        let binVueAerienne = false;
        let binBloquerVueAerienne = false;
        let binTricher = false;
        let binEnMouvement = false;
        let objCopieCameraVueJoueur = null;


        const tabImages = ['Transparent.gif', 'Sol.jpg', 'Mur.jpg', 'coffre.jpg'];

        const TEX_PLANCHER = 1;
        const TEX_MUR_OUVRABLE = 2;
        const TEX_TRANSP = 0;
        const TEX_COFFRE = 3;

        const INT_CELL_PROFONDEUR = 1;
        const INT_CELL_LARGEUR = 1;

        // index == niveaux
        tabNbOuvreurMur = [4,4,3,3,2,2,1,1,0,0];

        function demarrer() {
            objCanvas = document.getElementById('monCanvas');
            objCanvas.focus();
            objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
            objProgShaders = initShaders(objgl);
            objSons = initSons();
            objScene3D = initScene3D(objgl); // Créer la scène

            effacerCanevas(objgl);
            dessiner(objgl, objProgShaders, objScene3D);
            animer();
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerCanevas(objgl);
            mettreAjourAnimation();
            dessiner(objgl, objProgShaders, objScene3D);
        }

        function arreterAnimation() {
            if (objCycleAnimation != null) cancelAnimationFrame(objCycleAnimation)
            objCycleAnimation = null
		}

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {
            if (binEnMouvement) deplacerCamera();      
            detectionObjetAutourJoueur();
            if (binEnMouvement){
                binDemarrer = true;
            }
            gestionNiveaux()

            // Animation pour faire tourner le transpo
            for (let i = 0; i < tabIdTranspo.length; i++) {
                 let floatNouvelAngle = getAngleY(objScene3D.tabObjets3D[tabIdTranspo[i]].transformations) + 1;
                setAngleY(floatNouvelAngle, objScene3D.tabObjets3D[tabIdTranspo[i]].transformations);                
            }
            // Animation pour faire tourner les recepteurs
            for (let i = 0; i < tabIdRecept.length; i++) {
                 let floatNouvelAngle = getAngleY(objScene3D.tabObjets3D[tabIdRecept[i]].transformations) + 1;
                setAngleY(floatNouvelAngle, objScene3D.tabObjets3D[tabIdRecept[i]].transformations);                
            }            
        }

        function initScene3D(objgl) {
            let objScene3D = new Object();
            tabObjets3D = new Array();

            // Mettre les textures dans la scène
            objScene3D.textures = creerTextures(objgl, tabImages);

            const objPlancher = creerObj3DPlancher(objgl, TEX_PLANCHER);
            tabObjets3D.push(objPlancher);           

            const objPlafond = creerObj3DPlafond(objgl, TEX_PLANCHER, true);
            tabObjets3D.push(objPlafond);

            const objPointeFlechePosJoueur = creerObj3DPointeFlechePosJoueur(objgl, TEX_PLANCHER, 15, 15, false);
            tabObjets3D.push(objPointeFlechePosJoueur);

            const objCoffre = creerObj3DCoffre(objgl, TEX_COFFRE, tabPosCoffre[intNiveau-1].intZ, tabPosCoffre[intNiveau-1].intX);
            tabObjets3D.push(objCoffre);

            const objPlancherEnclos = creerObj3DPlancherEnclos(objgl, TEX_PLANCHER);
            tabObjets3D.push(objPlancherEnclos);            

            tabObjets3D = tabObjets3D.concat(initNiveau(tabObjets3D));     

            objScene3D.tabObjets3D = tabObjets3D;

            intNbOuvreurMur = tabNbOuvreurMur[intNiveau-1];

            // La caméra
            const camera = creerCamera();
            setPositionsCameraXYZ([objPlancher.fltCentrePlancher, 0.9, objPlancher.fltCentrePlancher], camera);
            setCiblesCameraXYZ([objPlancher.fltCentrePlancher, 0.3, 0], camera);
            setOrientationsXYZ([0, 1, 0], camera);
            objScene3D.camera = camera;

            return objScene3D;
        }

        function dessiner(objgl, objProgShaders, objScene3D) {
            // La vue
            objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);

            // Matrice de projection
            const matProjection = mat4.create();
            const fltRapportCanevas = objgl.drawingBufferWidth / objgl.drawingBufferHeight;
            mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);

            // Relier la matrice aux shaders
            objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

            for (let i = 0; i < objScene3D.tabObjets3D.length; i++) {
                if ((typeof objScene3D.tabObjets3D[i].binVisible !== 'undefined') && objScene3D.tabObjets3D[i].binVisible) {
                    const vertex = objScene3D.tabObjets3D[i].vertex;
                    const couleurs = objScene3D.tabObjets3D[i].couleurs;
                    const texels = objScene3D.tabObjets3D[i].texels;
                    const maillage = objScene3D.tabObjets3D[i].maillage;
                    const transformations = objScene3D.tabObjets3D[i].transformations;

                    // Matrice du modèle            
                    const matModeleVue = mat4.create();
                    mat4.identity(matModeleVue);

                    // Placer la caméra sur la scène
                    mat4.lookAt(getPositionsCameraXYZ(objScene3D.camera),
                        getCiblesCameraXYZ(objScene3D.camera),
                        getOrientationsXYZ(objScene3D.camera),
                        matModeleVue);

                    // Appliquer les transformations sur le modèle 
                    mat4.translate(matModeleVue, getPositionsXYZ(transformations));
                    mat4.scale(matModeleVue, getEchellesXYZ(transformations));
                    mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
                    mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180);
                    mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);

                    // Relier la matrice aux shaders
                    objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

                    if (maillage == null)
                        // Dessiner les sous-objets
                        for (let j = 0; j <vertex.length; j++) {

                            // Relier les vertex aux shaders
                            objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                            objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                            const intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                            // Relier les couleurs aux shaders
                            objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                            objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                            // Activer la texture
                            objgl.activeTexture(objgl.TEXTURE0 + texels[j].intNoTexture);
                            objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels[j].intNoTexture]);

                            // Relier les texels aux shaders
                            objgl.bindBuffer(objgl.ARRAY_BUFFER, texels[j]);
                            objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                            // Relier le no de texture et le taux de couleur aux shaders                 
                            objgl.uniform1i(objProgShaders.noTexture, texels[j].intNoTexture);
                            objgl.uniform1f(objProgShaders.pcCouleurTexel, texels[j].pcCouleurTexel);

                            // Dessiner
                            objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                        }
                    else { // Dessiner le maillage

                        // Relier les vertex aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                        objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                        // Relier les couleurs aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                        objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                        // Activer la texture
                        objgl.activeTexture(objgl.TEXTURE0 + texels.intNoTexture);
                        objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels.intNoTexture]);

                        // Relier les texels aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, texels);
                        objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                        // Relier le no de texture et le taux de couleur aux shaders                 
                        objgl.uniform1i(objProgShaders.noTexture, texels.intNoTexture);
                        objgl.uniform1f(objProgShaders.pcCouleurTexel, texels.pcCouleurTexel);

                        // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                        objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                        // Dessiner les triangles
                        objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                        // Dessiner les droites à la suite des triangles
                        objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
                    }
                }
            }
        }

        function effacerCanevas(objgl) {
            // Met la couleur d'effacement au noir et complétement opaque
            objgl.clearColor(0.0, 0.0, 0.0, 1.0);
            // Efface les couleurs et le buffer de profondeur.
            objgl.clear(objgl.COLOR_BUFFER_BIT | objgl.DEPTH_BUFFER_BIT);
        }

        /**
         * Changer la direction de gauche a droite (x/z) de la camera quand on appuis sur la souris
         * Click gauche seulement
        */
        function eventMouvementSouris() {                 
            if (binTournerCamera === true && !binVueAerienne) {
                mouvementCameraAvecSouris(event);                             
            }            
        }        

        /**
         * Verifier si on click sur la souris et ajoute la position du click
         */
        function eventClickDownSouris() {
            // si on click gauche
            if (event.button == 0) {
                binTournerCamera = true;
                positionSourisX = Math.floor(event.clientX);
                // cacher la souris
                document.body.style.cursor = 'none';
            }
        }
        /**
         * Arrete le mouvement de la camera quand on utilise le click
         */        
        function eventClickUpSouris() {
            if (event.button == 0) {
                binTournerCamera = false;
                // reafficher la souris
                document.body.style.cursor = 'auto';
            }        
        }

        // Mouvement avec clavier (fleche et WASD)
        // Rend le jeux 100x plus fluide
        function mouvementAvecClavier() {
            deplacerCameraClavier(event);
            if (!binBloquerVueAerienne && binDemarrer){
                cameraVueAerienne(event);  
            }
        }
        // arreter le mouvement quand on relache la touche
        function arretMouvementAvecClavier() {
            arretCameraClavier(event);
        }

        function changerPos(intX, intZ, transformations){
            setPositionX(intX, transformations);
            setPositionZ(intZ, transformations);
        }

    </script>
</head>

<body onload="demarrer()">
    <div id="jeu">
        <p>THESAURUS</p>
        <canvas id="monCanvas" width="640" height="640" tabIndex="1" onkeydown="mouvementAvecClavier();" onkeyup="arretMouvementAvecClavier();">
            Votre navigateur ne supporte pas la balise canvas
        </canvas>
        <div id="ui"></div>
        <div id="strAv"></div>
    </div>
    
<br/>
</body>
</html>